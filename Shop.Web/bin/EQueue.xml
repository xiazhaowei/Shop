<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EQueue</name>
    </assembly>
    <members>
        <member name="P:EQueue.Broker.DeleteMessageStrategies.DeleteMessageByCountStrategy.MaxChunkCount">
            <summary>表示磁盘上可以保存的最多的Chunk文件的个数；
            <remarks>
            比如设置为100，则磁盘上可以保存的最多的Chunk文件的个数为100，如果现在总的个数超过100，则最先产生的Chunk文件就会被删除。
            默认值为100，即如果每个Chunk文件的大小为256MB的话，则100 * 256 = 25GB，即磁盘总共会保存最多默认25GB的消息。
            </remarks>
            </summary>
        </member>
        <member name="P:EQueue.Broker.DeleteMessageStrategies.DeleteMessageByTimeStrategy.MaxStorageHours">
            <summary>表示消息可以保存的最大小时数；
            <remarks>
            比如设置为24 * 7，则表示如果某个chunk里的所有消息都消费过了，且该chunk里的所有消息都是24 * 7小时之前存储的，则该chunk就可以被删除了。
            默认值为24 * 30，即保存一个月；用户可以根据自己服务器磁盘的大小决定消息可以保留多久。
            </remarks>
            </summary>
        </member>
        <member name="M:EQueue.Broker.Storage.ChunkUtil.GetUsedMemoryPercent">
            <summary>获取当前使用的物理内存百分比
            </summary>
            <returns></returns>
        </member>
        <member name="F:EQueue.Broker.Storage.ChunkManagerConfig.BasePath">
            <summary>Chunk文件存储的根目录；
            </summary>
        </member>
        <member name="F:EQueue.Broker.Storage.ChunkManagerConfig.FileNamingStrategy">
            <summary>Chunk文件命名规则策略；
            </summary>
        </member>
        <member name="F:EQueue.Broker.Storage.ChunkManagerConfig.ChunkDataSize">
            <summary>Chunk文件大小，字节为单位，适用于文件内记录大小不固定的场景，如果是固定大小，则设置为0；
            </summary>
        </member>
        <member name="F:EQueue.Broker.Storage.ChunkManagerConfig.ChunkDataUnitSize">
            <summary>Chunk文件单条数据大小，字节为单位，适用于每条数据固定大小的场景；
            </summary>
        </member>
        <member name="F:EQueue.Broker.Storage.ChunkManagerConfig.ChunkDataCount">
            <summary>Chunk文件总数据数，适用于每个数据固定大小的场景；
            </summary>
        </member>
        <member name="F:EQueue.Broker.Storage.ChunkManagerConfig.FlushChunkIntervalMilliseconds">
            <summary>Chunk文件刷磁盘的间隔，毫秒为单位；
            </summary>
        </member>
        <member name="F:EQueue.Broker.Storage.ChunkManagerConfig.SyncFlush">
            <summary>表示是否同步刷盘，如果选择同步刷盘，则消息会写完全写入磁盘后再返回给消息发送者；默认为false，即异步刷盘，每个FlushChunkIntervalMilliseconds刷一次磁盘；
            </summary>
        </member>
        <member name="F:EQueue.Broker.Storage.ChunkManagerConfig.EnableCache">
            <summary>表示是否缓存Chunk，缓存Chunk可以提高消费速度；
            </summary>
        </member>
        <member name="F:EQueue.Broker.Storage.ChunkManagerConfig.ChunkReaderCount">
            <summary>Chunk文件的BinaryReader的个数；
            </summary>
        </member>
        <member name="F:EQueue.Broker.Storage.ChunkManagerConfig.MaxLogRecordSize">
            <summary>Chunk文件允许最大的记录的大小，字节为单位；
            </summary>
        </member>
        <member name="F:EQueue.Broker.Storage.ChunkManagerConfig.ChunkWriteBuffer">
            <summary>Chunk写入时的缓冲大小，字节为单位；
            </summary>
        </member>
        <member name="F:EQueue.Broker.Storage.ChunkManagerConfig.ChunkReadBuffer">
            <summary>Chunk读取时的缓冲大小，字节为单位；
            </summary>
        </member>
        <member name="F:EQueue.Broker.Storage.ChunkManagerConfig.ChunkCacheMaxPercent">
            <summary>使用的总物理内存上限，如果超过上限，则不允许创建新的Chunk文件；
            </summary>
        </member>
        <member name="F:EQueue.Broker.Storage.ChunkManagerConfig.ChunkCacheMinPercent">
            <summary>Chunk文件使用内存的安全水位；低于这个水位，则不需要进行Chunk文件的非托管内存释放处理；高于这个水位，则开始进行Chunk文件的非托管内存释放处理；
            </summary>
        </member>
        <member name="F:EQueue.Broker.Storage.ChunkManagerConfig.PreCacheChunkCount">
            <summary>应用启动时，需要预加载到非托管内存的Chunk文件数；
            </summary>
        </member>
        <member name="F:EQueue.Broker.Storage.ChunkManagerConfig.ChunkInactiveTimeMaxSeconds">
            <summary>Chunk文件非活跃时间，单位为秒；
            <remarks>
            在释放已完成的Chunk文件的非托管内存时，会根据这个非活跃时间来判断当前Chunk文件是否允许释放内存；
            如果某个已完成并已经有对应非托管内存的Chunk文件有超过这个时间都不活跃，则可以进行非托管内存的释放；
            是否活跃的依据是，只要该Chunk文件有发生读取或写入，就更新活跃时间；
            释放时，根据非活跃时间的长短作为顺序，总是先把非活跃时间最大的Chunk文件的非托管内存释放。
            </remarks>
            </summary>
        </member>
        <member name="F:EQueue.Broker.Storage.ChunkManagerConfig.ChunkLocalCacheSize">
            <summary>表示当Chunk文件无法分配非托管内存时，使用本地的环形数组进行缓存最新的记录。此属性指定本地环形数组的大小；
            </summary>
        </member>
        <member name="F:EQueue.Broker.Storage.ChunkManagerConfig.EnableChunkWriteStatistic">
            <summary>表示是否需要统计Chunk的写入情况
            </summary>
        </member>
        <member name="F:EQueue.Broker.Storage.ChunkManagerConfig.EnableChunkReadStatistic">
            <summary>表示是否需要统计Chunk的读取情况
            </summary>
        </member>
        <member name="P:EQueue.Broker.BrokerSetting.BrokerInfo">
            <summary>Broker基本配置信息
            </summary>
        </member>
        <member name="P:EQueue.Broker.BrokerSetting.NameServerList">
            <summary>NameServer地址列表
            </summary>
        </member>
        <member name="P:EQueue.Broker.BrokerSetting.NotifyWhenMessageArrived">
            <summary>消息到达时是否立即通知相关的PullRequest，默认为true；
            <remarks>
            如果希望当前场景消息吞吐量不大且要求消息消费的实时性更高，可以考虑设置为true；设置为false时，最多在<see cref="P:EQueue.Broker.BrokerSetting.CheckBlockingPullRequestMilliseconds"/>
            的时间后，PullRequest会被通知到有新消息；也就是说，设置为false时，消息最多延迟<see cref="P:EQueue.Broker.BrokerSetting.CheckBlockingPullRequestMilliseconds"/>。
            </remarks>
            </summary>
        </member>
        <member name="P:EQueue.Broker.BrokerSetting.RegisterBrokerToNameServerInterval">
            <summary>Broker定期向NameServer注册信息的时间间隔，默认为5秒钟；
            </summary>
        </member>
        <member name="P:EQueue.Broker.BrokerSetting.DeleteMessagesInterval">
            <summary>删除符合删除条件的消息的定时间隔，默认为10秒钟；
            </summary>
        </member>
        <member name="P:EQueue.Broker.BrokerSetting.DeleteQueueMessagesInterval">
            <summary>删除符合删除条件的队列中的消息索引的定时间隔；一定是消息先被删除后，该消息索引才会从队列中删除；默认为10秒钟；
            </summary>
        </member>
        <member name="P:EQueue.Broker.BrokerSetting.DeleteMessageIgnoreUnConsumed">
            <summary>表示删除消息文件时，是否需要忽略未消费过的消息，也就是说一满足删除策略条件，就直接删除，不关心这些消息是否还没消费过；默认值未True；
            </summary>
        </member>
        <member name="P:EQueue.Broker.BrokerSetting.PersistConsumeOffsetInterval">
            <summary>持久化消息消费进度的间隔，默认为1s；
            </summary>
        </member>
        <member name="P:EQueue.Broker.BrokerSetting.CheckBlockingPullRequestMilliseconds">
            <summary>扫描PullRequest对应的队列是否有新消息的时间间隔，默认为1s；
            </summary>
        </member>
        <member name="P:EQueue.Broker.BrokerSetting.ProducerExpiredTimeout">
            <summary>判断生产者者不在线的超时时间，默认为10s；即如果一个生产者10s不发送心跳到Broker，则认为不在线；Broker自动会关闭该生产者的连接并从生产者列表中移除；
            </summary>
        </member>
        <member name="P:EQueue.Broker.BrokerSetting.ConsumerExpiredTimeout">
            <summary>判断消费者心跳的超时时间，默认为10s；即如果一个消费者10s不发送心跳到Broker，则认为不在线；Broker自动会关闭该消费者的连接并从消费者列表中移除；
            </summary>
        </member>
        <member name="P:EQueue.Broker.BrokerSetting.RemoveConsumerWhenDisconnect">
            <summary>当消费者的链接断开时，是否需要立即将消费者从消费者列表中移除；如果为True，则消费者链接断开时立即移除；否则，会等到消费者心跳的超时时间到达后才会移除该消费者。默认为True
            </summary>
        </member>
        <member name="P:EQueue.Broker.BrokerSetting.AutoCreateTopic">
            <summary>是否自动创建Topic，默认为true；线上环境建议设置为false，Topic应该总是由后台管理控制台来创建；
            </summary>
        </member>
        <member name="P:EQueue.Broker.BrokerSetting.TopicDefaultQueueCount">
            <summary>创建Topic时，默认创建的队列数，默认为4；
            </summary>
        </member>
        <member name="P:EQueue.Broker.BrokerSetting.TopicMaxQueueCount">
            <summary>一个Topic下最多允许的队列数，默认为256；
            </summary>
        </member>
        <member name="P:EQueue.Broker.BrokerSetting.MessageMaxSize">
            <summary>消息最大允许的字节数，默认为4MB；
            </summary>
        </member>
        <member name="P:EQueue.Broker.BrokerSetting.MessageWriteQueueThreshold">
            <summary>消息写入缓冲队列限流阈值，默认为20000；
            </summary>
        </member>
        <member name="P:EQueue.Broker.BrokerSetting.IsMessageStoreMemoryMode">
            <summary>表示是否在内存模式下运行，内存模式下消息都不存储到文件，仅保存在内存；默认为False；
            </summary>
        </member>
        <member name="P:EQueue.Broker.BrokerSetting.FileStoreRootPath">
            <summary>EQueue存储文件的根目录
            </summary>
        </member>
        <member name="P:EQueue.Broker.BrokerSetting.LatestMessageShowCount">
            <summary>最新消息显示个数，默认为100个；
            </summary>
        </member>
        <member name="P:EQueue.Broker.BrokerSetting.SocketSetting">
            <summary>TCP通行层设置
            </summary>
        </member>
        <member name="P:EQueue.Broker.BrokerSetting.MessageChunkConfig">
            <summary>消息文件存储的相关配置，默认一个消息文件的大小为256MB
            </summary>
        </member>
        <member name="P:EQueue.Broker.BrokerSetting.QueueChunkConfig">
            <summary>队列文件存储的相关配置，默认一个队列文件中存储100W个消息索引，每个消息索引8个字节
            </summary>
        </member>
        <member name="P:EQueue.Clients.Consumers.ConsumerSetting.ClusterName">
            <summary>Producer所在的集群名，一个集群下有可以有多个Producer；默认为DefaultCluster
            </summary>
        </member>
        <member name="P:EQueue.Clients.Consumers.ConsumerSetting.NameServerList">
            <summary>NameServer地址列表
            </summary>
        </member>
        <member name="P:EQueue.Clients.Consumers.ConsumerSetting.SocketSetting">
            <summary>Socket通信层相关的设置；
            </summary>
        </member>
        <member name="P:EQueue.Clients.Consumers.ConsumerSetting.AutoPull">
            <summary>表示框架是否需要自动PullMessage、HandleMessage、Commit Consume Offset；默认值为True；
            </summary>
        </member>
        <member name="P:EQueue.Clients.Consumers.ConsumerSetting.CommitConsumeOffsetAsync">
            <summary>当AutoPull为False时，当用户调用Consumer的CommitConsumeOffset方法来更新消费进度时，Consumer内部是否需要异步提交消费进度到Broker；默认为True；
            如果是异步，则当用户调用CommitConsumeOffset时，只是在本地内存更新消费进度，然后定时的方式提交消费进度到Broker；
            定时间隔通过CommitConsumerOffsetInterval来设置；
            </summary>
        </member>
        <member name="P:EQueue.Clients.Consumers.ConsumerSetting.ManualPullLocalMessageQueueMaxSize">
            <summary>当要自己拉取消息时，Consumer内部拉取消息到本地缓存的缓存队列的大小，默认为100000
            </summary>
        </member>
        <member name="P:EQueue.Clients.Consumers.ConsumerSetting.RebalanceInterval">
            <summary>消费者负载均衡的间隔，默认为1s；
            </summary>
        </member>
        <member name="P:EQueue.Clients.Consumers.ConsumerSetting.RefreshBrokerAndTopicRouteInfoInterval">
            <summary>刷新Broker信息和Topic路由信息的间隔，默认为5s；
            </summary>
        </member>
        <member name="P:EQueue.Clients.Consumers.ConsumerSetting.HeartbeatBrokerInterval">
            <summary>向Broker发送心跳的间隔，默认为1s；
            </summary>
        </member>
        <member name="P:EQueue.Clients.Consumers.ConsumerSetting.CommitConsumerOffsetInterval">
            <summary>向Broker发送消息消费进度的间隔，默认为1s；
            </summary>
        </member>
        <member name="P:EQueue.Clients.Consumers.ConsumerSetting.PullMessageFlowControlThreshold">
            <summary>从Broker拉取消息时，开始流控的阀值，默认为10000；即当前拉取到本地未消费的消息数到达10000时，将开始做流控，减慢拉取速度；
            </summary>
        </member>
        <member name="P:EQueue.Clients.Consumers.ConsumerSetting.PullMessageFlowControlStepPercent">
            <summary>当拉取消息开始流控时，需要逐渐增加流控时间的步长百分比，默认为1%；
            <remarks>
            假设当前本地拉取且并未消费的消息数超过阀值时，需要逐渐增加流控时间；具体增加多少时间取决于
            PullMessageFlowControlStepPercent以及PullMessageFlowControlStepWaitMilliseconds属性的配置值；
            举个例子，假设流控阀值为1000，步长百分比为1%，每个步长等待时间为1ms；
            然后，假如当前拉取到本地未消费的消息数为1200，
            则超出阀值的消息数是：1200 - 1000 = 200，
            步长为：1000 * 1% = 10；
            然后，200 / 10 = 20，即当前超出的消息数是步长的20倍；
            所以，最后需要等待的时间为20 * 1ms = 20ms;
            </remarks>
            </summary>
        </member>
        <member name="P:EQueue.Clients.Consumers.ConsumerSetting.PullMessageFlowControlStepWaitMilliseconds">
            <summary>当拉取消息开始流控时，每个步长需要等待的时间，默认为1ms；
            </summary>
        </member>
        <member name="P:EQueue.Clients.Consumers.ConsumerSetting.SuspendPullRequestMilliseconds">
            <summary>拉取消息TCP长轮训的周期，默认为60s；
            </summary>
        </member>
        <member name="P:EQueue.Clients.Consumers.ConsumerSetting.PullRequestTimeoutMilliseconds">
            <summary>拉取消息的请求的超时时间，必须大于长轮训的周期，默认为70s；
            </summary>
        </member>
        <member name="P:EQueue.Clients.Consumers.ConsumerSetting.RetryMessageInterval">
            <summary>重试处理出现异常（失败）的消息的时间间隔，一次重试一个处理失败的消息，默认为1000毫秒；
            </summary>
        </member>
        <member name="P:EQueue.Clients.Consumers.ConsumerSetting.PullMessageBatchSize">
            <summary>一次从Broker拉取的消息的最大数量，默认为64个；
            </summary>
        </member>
        <member name="P:EQueue.Clients.Consumers.ConsumerSetting.ConsumeFromWhere">
            <summary>消费者启动时，针对当前要消费的队列，如果Broker上之前没有保存过任何该队列的消费进度（消费者第一次启动），则通过该选项指定要从队列的什么位置开始消费；可以从队列的第一个消息开始消费，也可以从最后一个消息之后的后续的新消息开始消费；默认为LastOffset
            </summary>
        </member>
        <member name="P:EQueue.Clients.Consumers.ConsumerSetting.MessageHandleMode">
            <summary>消息消费的模式，支持并行消费和顺序消费两种方式，默认为并行消费；
            <remarks>
            并行消费是指多线程同时消费不同的消息；
            顺序消费是指单线程顺序消费消息，但这里的顺序消费不是指绝对的顺序消费；
            比如消费某个消息时遇到异常，则该消息会放到本地的一个基于内存的重试队列，重试队列中的消息会异步定时进行重试，然后当前消息的下一个消息还是会继续消费的。
            </remarks>
            </summary>
        </member>
        <member name="P:EQueue.Clients.Producers.ProducerSetting.ClusterName">
            <summary>Producer所在的集群名，一个集群下有可以有多个Producer；默认为DefaultCluster
            </summary>
        </member>
        <member name="P:EQueue.Clients.Producers.ProducerSetting.NameServerList">
            <summary>NameServer地址列表
            </summary>
        </member>
        <member name="P:EQueue.Clients.Producers.ProducerSetting.SocketSetting">
            <summary>Socket通信层相关的设置；
            </summary>
        </member>
        <member name="P:EQueue.Clients.Producers.ProducerSetting.RefreshBrokerAndTopicRouteInfoInterval">
            <summary>刷新Broker信息和Topic路由信息的间隔，默认为5s；
            </summary>
        </member>
        <member name="P:EQueue.Clients.Producers.ProducerSetting.HeartbeatBrokerInterval">
            <summary>向Broker发送心跳的间隔，默认为1s；
            </summary>
        </member>
        <member name="P:EQueue.Clients.Producers.ProducerSetting.MessageMaxSize">
            <summary>消息最大允许的字节数，默认为4MB；
            </summary>
        </member>
        <member name="P:EQueue.Clients.Producers.ProducerSetting.SendMessageMaxRetryCount">
            <summary>发送消息遇到错误时自动重试的最大次数，默认为5次；
            </summary>
        </member>
        <member name="P:EQueue.NameServer.NameServerSetting.BindingAddress">
            <summary>服务端口号，默认为9493
            </summary>
        </member>
        <member name="P:EQueue.NameServer.NameServerSetting.BrokerInactiveMaxMilliseconds">
            <summary>Broker不活跃最大允许时间，如果一个Broker超过此时间未发送心跳，则认为此Broker挂掉了；默认超时时间为10s;
            </summary>
        </member>
        <member name="P:EQueue.NameServer.NameServerSetting.AutoCreateTopic">
            <summary>是否自动创建Topic，默认为true；线上环境建议设置为false，Topic应该总是由后台管理控制台来创建；
            </summary>
        </member>
        <member name="P:EQueue.NameServer.NameServerSetting.SocketSetting">
            <summary>TCP通行层设置
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.BrokerInfo.BrokerName">
            <summary>Broker的名字，默认为DefaultBroker
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.BrokerInfo.GroupName">
            <summary>Broker的分组名，当实现主备时，MasterBroker和它的所有的SlaveBroker的分组名相同；不同的MasterBroker的分组名要求不同；默认为DefaultGroup
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.BrokerInfo.ClusterName">
            <summary>Broker的集群名，一个集群下有可以有多个MasterBroker，每个MasterBroker可以有多个SlaveBroker；默认为DefaultCluster
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.BrokerInfo.BrokerRole">
            <summary>Broker的角色，目前有Master,Slave两种角色；默认为Master
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.BrokerInfo.ProducerAddress">
            <summary>供Producer连接的地址；默认IP为本地IP，端口为5000，格式为ip:port
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.BrokerInfo.ConsumerAddress">
            <summary>供Consumer连接的地址；默认IP为本地IP，端口为5001，格式为ip:port
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.BrokerInfo.AdminAddress">
            <summary>Producer，Consumer对Broker发送的发消息和拉消息除外的其他内部请求，以及后台管理控制台发送的查询请求使用的地址；默认IP为本地IP，端口为5002，格式为ip:port
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.TopicConsumeInfo.ConsumerGroup">
            <summary>消费者的分组
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.TopicConsumeInfo.Topic">
            <summary>主题
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.TopicConsumeInfo.QueueId">
            <summary>队列ID
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.TopicConsumeInfo.QueueCurrentOffset">
            <summary>队列当前位置
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.TopicConsumeInfo.ConsumedOffset">
            <summary>队列消费位置
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.TopicConsumeInfo.ClientCachedMessageCount">
            <summary>客户端缓存的消息树
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.TopicConsumeInfo.QueueNotConsumeCount">
            <summary>未消费消息数，即消息堆积数
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.TopicConsumeInfo.OnlineConsumerCount">
            <summary>在线消费者个数
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.TopicConsumeInfo.ConsumeThroughput">
            <summary>消费消息的吞吐，每10s统计一次
            </summary>
        </member>
        <member name="M:EQueue.Protocols.Brokers.TopicConsumeInfo.CalculateQueueNotConsumeCount">
            <summary>计算队列未消费的消息数，即队列的消息堆积数
            </summary>
            <returns></returns>
        </member>
        <member name="P:EQueue.Protocols.Brokers.ConsumerInfo.ConsumerGroup">
            <summary>消费者的分组
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.ConsumerInfo.ConsumerId">
            <summary>消费者的ID
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.ConsumerInfo.Topic">
            <summary>主题
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.ConsumerInfo.QueueId">
            <summary>队列ID
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.ConsumerInfo.QueueCurrentOffset">
            <summary>队列当前位置
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.ConsumerInfo.ConsumedOffset">
            <summary>队列消费位置
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.ConsumerInfo.QueueNotConsumeCount">
            <summary>未消费消息数，即消息堆积数
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.ConsumerInfo.ClientCachedMessageCount">
            <summary>客户端缓存的消息树
            </summary>
        </member>
        <member name="M:EQueue.Protocols.Brokers.ConsumerInfo.CalculateQueueNotConsumeCount">
            <summary>计算队列未消费的消息数，即队列的消息堆积数
            </summary>
            <returns></returns>
        </member>
        <member name="P:EQueue.Protocols.Brokers.BrokerStatisticInfo.BrokerInfo">
            <summary>基本信息
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.BrokerStatisticInfo.TopicCount">
            <summary>主题个数
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.BrokerStatisticInfo.QueueCount">
            <summary>队列个数
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.BrokerStatisticInfo.ProducerCount">
            <summary>生产者个数
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.BrokerStatisticInfo.ConsumerGroupCount">
            <summary>消费者组个数
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.BrokerStatisticInfo.ConsumerCount">
            <summary>消费者个数
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.BrokerStatisticInfo.TotalUnConsumedMessageCount">
            <summary>未消费消息总数
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.BrokerStatisticInfo.MessageChunkCount">
            <summary>消息Chunk文件总数
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.BrokerStatisticInfo.MessageMinChunkNum">
            <summary>消息最小Chunk
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.BrokerStatisticInfo.MessageMaxChunkNum">
            <summary>消息最大Chunk
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.BrokerStatisticInfo.TotalSendThroughput">
            <summary>发送消息的总吞吐，每1s统计一次
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.BrokerStatisticInfo.TotalConsumeThroughput">
            <summary>消费消息的总吞吐，每10s统计一次
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.TopicQueueInfo.Topic">
            <summary>主题
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.TopicQueueInfo.QueueId">
            <summary>队列ID
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.TopicQueueInfo.QueueCurrentOffset">
            <summary>队列当前最大Offset
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.TopicQueueInfo.QueueMinOffset">
            <summary>队列当前最小Offset
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.TopicQueueInfo.QueueMinConsumedOffset">
            <summary>队列当前被所有消费者都消费了的最小Offset
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.TopicQueueInfo.QueueNotConsumeCount">
            <summary>队列当前未被消费的消息个数
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.TopicQueueInfo.ProducerVisible">
            <summary>对生产者是否可见
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.TopicQueueInfo.ConsumerVisible">
            <summary>对消费者是否可见
            </summary>
        </member>
        <member name="P:EQueue.Protocols.Brokers.TopicQueueInfo.SendThroughput">
            <summary>发送消息的吞吐，每1s统计一次
            </summary>
        </member>
        <member name="M:EQueue.Protocols.Brokers.TopicQueueInfo.CalculateQueueNotConsumeCount">
            <summary>计算队列未消费的消息数，即队列的消息堆积数
            </summary>
            <returns></returns>
        </member>
        <member name="T:EQueue.Utils.ConsoleEventHandlerService">
            <summary>Service to catch console control events (ie CTRL-C) in C#.
            </summary>
        </member>
        <member name="T:EQueue.Utils.ConsoleEventHandlerService.ControlEventHandler">
            <summary>Handler to be called when a console event occurs.
            </summary>
        </member>
    </members>
</doc>
